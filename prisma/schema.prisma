// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../ERD.svg"
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  hashedPassword String
  refreshToken   String?
  tokens         Token[]
  entity         Entity?
  role           Role?     @relation(fields: [roleId], references: [id])
  roleId         Int?
  tabs           Tab[]
  logs           Log[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  @@map("users")
}

model Entity {
  id        String    @id @default(uuid())
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?   @unique
  firstName String?
  lastName  String?
  cpf       String?
  tabs      Tab[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("entities")
}

model Token {
  id        String    @id @default(uuid())
  value     String
  expiresIn Int
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("tokens")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  observation String?
  dishes      Dish[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("categories")
}

model Item {
  id                   String           @id @default(uuid())
  name                 String
  description          String?
  cost                 Float?
  type                 ItemType         @relation(fields: [itemTypeId], references: [id])
  itemTypeId           String
  measurementUnit      String? // Unidade de medida, ex: kg, litros
  measurementUnitValue Float? // Quantidade por unidade de medida
  dishIngredients      DishIngredient[]
  itemOrders           ItemOrder[]
  section              Section[]
  stock                Stock?
  menus                Menu[]
  disabled             Boolean          @default(false)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  deletedAt            DateTime?

  @@map("items")
}

model ItemType {
  id        String    @id @default(uuid())
  name      String
  items     Item[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("item_types")
}

model DishIngredient {
  id        String    @id @default(uuid())
  dish      Dish      @relation(fields: [dishId], references: [id])
  dishId    String
  item      Item      @relation(fields: [itemId], references: [id])
  itemId    String
  quantity  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("dish_ingredients")
}

model Dish {
  id              String           @id @default(uuid())
  name            String
  description     String?
  price           Float
  photoUrl        String?
  disabled        Boolean          @default(false)
  categories      Category[]
  dishIngredients DishIngredient[]
  dishOrders      DishOrder[]
  menu            Menu[]
  recipe          String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?

  Section Section[]
}

model Menu {
  id          String    @id @default(uuid())
  name        String
  sections    Section[] // Relacionamento com seções
  dishes      Dish[]
  items       Item[]
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("menus")
}

model Section {
  id        String    @id @default(uuid())
  name      String // Nome da seção, como "Entradas" ou "Sobremesas"
  menu       Menu[]
  items     Item[]
  dishes    Dish[] // Relacionamento com pratos
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("sections")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  permissions Permission[]
  users       User[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?

  @@map("roles")
}

model Permission {
  id        String    @id @default(uuid())
  name      String
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("permissions")
}

model Tab {
  id           String        @id @default(uuid())
  tabNumber    Int?
  //Todo: check = it could be a table number instead of a user
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  entity       Entity?       @relation(fields: [entityId], references: [id])
  entityId     String?
  orders       Order[]
  total        Float?
  status       TabStatus     @default(OPEN)
  closedAt     DateTime?
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?

  @@map("tabs")
}

model DishOrder {
  id        String    @id @default(uuid())
  dish      Dish      @relation(fields: [dishId], references: [id])
  dishId    String
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   String
  quantity  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([orderId, dishId])
  @@map("dish_orders")
}

model ItemOrder {
  id        String    @id @default(uuid())
  item      Item      @relation(fields: [itemId], references: [id])
  itemId    String
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   String
  quantity  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([orderId, itemId])
  @@map("item_orders")
}

model Order {
  id          String       @id @default(uuid())
  tab         Tab          @relation(fields: [tabId], references: [id])
  tabId       String
  status      OrderStatus?
  itemsOrder  ItemOrder[]
  dishesOrder DishOrder[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?

  @@map("orders")
}

model Stock {
  id             String          @id @default(uuid())
  item           Item            @relation(fields: [itemId], references: [id])
  itemId         String          @unique
  quantity       Int
  stockMovements StockMovement[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?

  @@map("stocks")
}

model StockMovement {
  id            String       @id @default(uuid())
  stock         Stock        @relation(fields: [stockId], references: [id])
  stockId       String
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId Int? // Relacionamento com a tabela Transaction
  movementType  MovementType // Tipo de movimentação: Entrada, Saída, Ajuste
  quantity      Int // Quantidade movimentada
  description   String? // Descrição do motivo da movimentação
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?

  @@map("stock_movements")
}

model Transaction {
  id              Int                      @id @default(autoincrement())
  date            DateTime                 @default(now())
  transactionType TransactionType
  description     String
  amount          Float
  paymentMethod   TransactionPaymentMethod
  category        TransactionCategory
  status          TransactionStatus
  tabId           String?
  tab             Tab?                     @relation(fields: [tabId], references: [id])
  stockMovements  StockMovement[] // Relacionamento com as movimentações de estoque
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  deletedAt       DateTime?

  @@map("transactions")
}

model Log {
  id        Int      @id @default(autoincrement())
  path      String
  method    String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  payload   Json?
  status    Int
  createdAt DateTime @default(now())
}

enum TransactionType {
  // SALE // Vendas
  EXPENSE // Despesas
  INCOME // Recebimentos
}

enum TransactionPaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  PIX
  TRANSFER
}

enum MovementType {
  ENTRY
  EXIT
  ADJUSTMENT
}

enum TransactionCategory {
  FOOD
  SALARY
  STOCK
  BILLS
  MAINTENANCE
  OTHER
}

enum TransactionStatus {
  PENDING
  PAID
  CANCELED
}

//Enums
enum TabStatus {
  OPEN
  CLOSED
}

enum OrderStatus {
  ORDER_PLACED
  ORDER_IN_PROCESS
  ORDER_FINALIZED
}

enum TabOwner {
  CUSTOMER
  WAITER
}
