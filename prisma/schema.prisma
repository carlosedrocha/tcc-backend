// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../ERD.png"
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  hashedPassword String
  refreshToken   String?
  tokens         Token[]
  entity         Entity?
  role           Role?     @relation(fields: [roleId], references: [id])
  roleId         Int?
  tabs           Tab[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  @@map("users")
}

model Entity {
  id        String    @id @default(uuid())
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?   @unique
  firstName String?
  lastName  String?
  cpf       String?
  tabs      Tab[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("entities")
}

model Token {
  id        String    @id @default(uuid())
  value     String
  expiresIn Int
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("tokens")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  observation String?
  dishes      Dish[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("categories")
}

model Item {
  id                   String           @id @default(uuid())
  name                 String
  description          String?
  cost                 Float?
  type                 ItemType         @relation(fields: [itemTypeId], references: [id])
  itemTypeId           String
  measurementUnit      String?
  measurementUnitValue Float?
  dishIngredients      DishIngredient[]
  itemOrders           ItemOrder[]
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  deletedAt            DateTime?

  @@map("items")
}

model ItemType {
  id        String    @id @default(uuid())
  name      String
  items     Item[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("item_types")
}

model DishIngredient {
  id        String    @id @default(uuid())
  dish      Dish      @relation(fields: [dishId], references: [id])
  dishId    String
  item      Item      @relation(fields: [itemId], references: [id])
  itemId    String
  quantity  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("dish_ingredients")
}

model Dish {
  id              String           @id @default(uuid())
  name            String
  description     String?
  price           Float
  photoUrl        String?
  categories      Category[]
  dishIngredients DishIngredient[]
  menus           Menu[]
  dishOrders      DishOrder[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
}

model Menu {
  id          String    @id @default(uuid())
  name        String
  dishes      Dish[]
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("menus")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  permissions Permission[]
  users       User[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?

  @@map("roles")
}

model Permission {
  id        String    @id @default(uuid())
  name      String
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("permissions")
}

model Tab {
  id        String    @id @default(uuid())
  tabNumber Int?
  //Todo: check = it could be a table number instead of a user
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  entity    Entity?   @relation(fields: [entityId], references: [id])
  entityId  String?
  orders    Order[]
  total     Float?
  status    TabStatus @default(OPEN)
  closedAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("tabs")
}

model DishOrder {
  id        String    @id @default(uuid())
  dish      Dish      @relation(fields: [dishId], references: [id])
  dishId    String
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   String
  quantity  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([orderId, dishId])

  @@map("dish_orders")
}

model ItemOrder {
  id        String    @id @default(uuid())
  item      Item      @relation(fields: [itemId], references: [id])
  itemId    String
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   String
  quantity  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([orderId, itemId])

  @@map("item_orders")
}

model Order {
  id          String      @id @default(uuid())
  tab         Tab         @relation(fields: [tabId], references: [id])
  tabId       String
  status      OrderStatus?
  itemsOrder  ItemOrder[]
  dishesOrder DishOrder[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?

  @@map("orders")
}

//Enums
enum TabStatus {
  OPEN
  CLOSED
}

enum OrderStatus {
  ORDER_PLACED
  ORDER_IN_PROCESS
  ORDER_FINALIZED
}

enum TabOwner {
  CUSTOMER
  WAITER
}
